// Motion

move (10) steps
turn cw (15) degrees
turn right (15) degrees
turn ↻ (15) degrees
turn ccw (15) degrees
turn left (15) degrees
turn ↺ (15) degrees

go to (random position V)
go to x: (0) y: (0)
glide (1) secs to (random position V)
glide (1) secs to x: (0) y: (0)

point in direction (90)
point towards (mouse-pointer V)

change x by (10)
set x to (0)
change y by (10)
set y to (0)

if on edge, bounce

set rotation style [left-right V]

(x position)
(y position)
(direction)



// Looks

say [Hello!] for (2) secs
say [Hello!]
think [Hmm...] for (2) secs
think [Hmm...]

switch costume to (costume1 V)
next costume
switch backdrop to (backdrop1 V)
switch backdrop to (backdrop1 V) and wait
next backdrop

change size by (10)
set size to (100) %

change [color V] effect by (25)
set [color V] effect to (0)
clear graphic effects

show
hide

go to [front V] layer
go [forward V] (1) layers

(costume [number V])
(backdrop [number V])
(size)



// Sound

play sound (meow V) until done
play sound ( V)
stop all sounds

change [pitch V] effect by (10)
set [pitch V] effect to (100)
clear sound effects

change volume by (-10)
set volume to (100) %
(volume)



// Events

when gf clicked
when green flag clicked
when flag clicked
when ⚑ clicked
when [space V] key pressed
when this sprite clicked
when stage clicked
when backdrop switches to [backdrop1 V]

when [loudness V] > (10)

when I receive [message1 V]
broadcast [message1 V]
broadcast [message1 V] and wait

// hidden blocks

when sprite touches (mouse-pointer V)



// Control

wait (1) secs

repeat (10) {

}

forever {

}

if <> then {

}

if <> then {

} else {

}

wait until <>

repeat until <> {

}

// stop caps

stop [all V]
stop [all scenes V]
stop [this script V]
stop [this block V]

// stop stack

stop [all but this script V]
stop [other scripts in sprite V]
stop [other scripts in stage V]

when I start as a clone
create clone of [myself V]
delete this clone

// hidden blocks

while <> {
    
}

for each [i V] in (10) {

}

(counter)
increment counter
clear counter



// Sensing

<touching (mouse-pointer V) ?>
<touching color [#911a44] ?>
<color [#911a44] is touching [#911a44]?>
(distance to [mouse-pointer])

ask [What's your name?] and wait
(answer)

<key (space V) pressed?>
<mouse down?>
(mouse x)
(mouse y)

set drag mode [draggable V]

(loudness)

(timer)
reset timer

([backdrop # V] of [stage V])

(current (year V))
(days since 2000)
(username)

// hidden blocks

(user id)



// Operators

(() + ())
(() - ())
(() * ())
(() / ())

(pick random (1) to (10))

<[] < []>
<[] = []>
<[] > []>

<<> and <>>
<<> or <>>
<not <>>

(join [apple ] [banana])
(letter (1) of [apple])
(length of [apple])
<[apple] contains [a] ?>

(() mod ())
(round ())

([abs V] of (10))
([floor V] of (10))
([ceiling V] of (10))
([sqrt V] of (10))
([sin V] of (10))
([cos V] of (10))
([tan V] of (10))
([asin V] of (10))
([acos V] of (10))
([atan V] of (10))
([ln V] of (10))
([log V] of (10))
([e ^ V] of (10))
([10 ^ V] of (10))



// Variables
(var)

set [var V] to [0]
change [var V] by (1)
show variable [var V]
hide variable [var V]



// List
(list)

add [thing] to [list V]

delete (1) of [list V]
delete all of [list V]
insert [thing] at (1) of [list V]
replace item (1) of [list V] with [thing]

(item (1) of [list V])
(item # of [thing] in [list V])
(length of [list V])
<[list V] contains [thing] ?>

show list [list V]
hide list [list V]



// my blocks

define {block (reporter) [string] <boolean>}
block (reporter) (string) <boolean>



// Music
play drum ((1) Snare Drum V) for (0.25) beats
rest for (0.25) beats
play note (60) for (0.25) beats
set instrument to ((1) Piano V)
set tempo to (60)
change tempo by (20)
(tempo)

// Pen
erase all
stamp
pen down
pen up
set pen color to [#FF0000]
change pen (color V) by (10)
set pen (color V) to (50)
change pen size by (1)
set pen size to (1)

// Video Sensing
when video motion > (10)
video (motion V) on (sprite V)
turn video (on V)
set video transparency to (50)

// Text-to-Sppech
speak [hello]
set voice to (alto V)
set language to (English V)

// Translate
(translate [hello] to (Zulu V))
(language)

// Makey Makey
// NOTE: disambiguation may apply from now on
// disambig'd to event
when (space V) key pressed
when (left up right V) pressed in order

// micro:bit
when (A V) button pressed
<(A V) button pressed?>

when (moved V)

display (heart V) // TODO: add microbit pattern input
display text [Hello!]
clear display

when tilted (any V)
<tilted (any V) ?>
(tilt angle (front V))
when pin (0 V) connected

// EV3
motor (A V) turn this way for (1) seconds
motor (A V) turn that way for (1) seconds
motor (A V) set power (100) %
(motor (A V) position)
when button (1 V) pressed
when distance \< (5)
when brightness \< (50)
<button (1 V) pressed?>
// disambig'd to wedo2
(distance)
(brightness)
beep note (60) for (0.5) secs

// BOOST
turn motor (A V) for (1) seconds
turn motor (A V) for (1) rotations
turn motor (A V) on
turn motor (A V) off
set motor (ABCD V) speed to (100) %
set motor (A V) direction (this way V)
// disambig'd to ev3
(motor (A V) position)
when (any color V) brick seen
<seeing (any color V) brick?>
// these two are disambig'd to microbit
when tilted (any V)
(tilt angle (up V))
// disambig'd to wedo2
set light color to (50)

// WeDo 2.0
turn (motor V) on for (1) seconds
turn (motor V) on
turn (motor V) off
set (motor V) power to (100)
set (motor V) direction to (this way V)
set light color to (50)
when distance (\< V) (50)
// disambig'd to microbit
when tilted (any V)
(distance)
// these two are disambig'd to microbit
<tilted (any V) ?>
(tilt angle (up V))

// Force and Acceleration
// disambig'd to microbit
when (shaken V)
when (started falling V)
when force sensor (pushed V)
(force)

// these three are disambig'd to microbit

when tilted (any V)
<tilted (any V) ?>
(tilt angle (front V))
<falling?>
(spin speed (z V))
(acceleration (x V))
